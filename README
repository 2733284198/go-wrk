go-wrk - a HTTP benchmarking tool based in spirit on the excellent wrk tool (https://github.com/wg/wrk)

  go-wrk is a modern HTTP benchmarking tool capable of generating significant
  load when run on a single multi-core CPU. It builds on go language go routines and scheduler
  for behind the scenes async IO and concurrency.

  It was created mostly to examine go language (http://golang.org) performance and verbosity compared to C
  (the language wrk was written in).
  It turns out that it is just as good in terms of throughput! And the amount of code is significantly less.
  go-wrk is the product of one afternoon, and its quality is comparable to wrk.

Building

   go get github.com/tsliwowicz/go-wrk
   This will download and compile go-wrk. The binary will be placed under your $GOPATH/bin directory

Basic Usage

  ./go-wrk -t 80 -d 5  http://192.168.1.118:8080/json

  This runs a benchmark for 5 seconds, using 80 go routines

  Output:

  Running 5s test @ http://192.168.1.118:8080/json
  80 goroutine(s)
	142470 requests in 4.949028953s, 19.57MB read
	Requests/sec:	28787.47
	Transfer/sec:	3.95MB
	num errors 2
	Done

Benchmarking Tips

  The machine running go-wrk must have a sufficient number of ephemeral ports
  available and closed sockets should be recycled quickly. To handle the
  initial connection burst the server's listen(2) backlog should be greater
  than the number of concurrent connections being tested.

Acknowledgements

  golang is awesome. I did not need anything but this to create go-wrk.
  I fully credit the wrk project (https://github.com/wg/wrk) for the inspiration and even parts of this text.
  I also used similar command line arguments format and output format.
